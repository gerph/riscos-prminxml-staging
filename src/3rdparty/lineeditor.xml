<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE riscos-prm PUBLIC "-//Gerph//DTD PRM documentation 1.02//EN"
"http://gerph.org/dtd/100/prm.dtd">
<riscos-prm>
  <chapter title="LineEditor module">
    <section title="Introduction and Overview">
      <p><fixme>Provide something from the documentation</fixme></p>

      <p>LineEditor provides a command line editing facility in task windows
      and at the ShellCLI (F12). For example:<list>
          <item>
            <p>Previously-entered commands can be retrieved and stepped
            through by using the up and down arrow keys.</p>
          </item>

          <item>
            <p>A command line can be edited by using the left and right arrow
            keys to move to the desired position in the line. Text can then be
            inserted, removed or replaced as desired.</p>
          </item>

          <item>
            <p>A facility known as "tab completion" allows a filename to be
            selected by entering only the first few characters of the
            filename.</p>
          </item>
        </list></p>

      <p>Users familiar with Unix/Linux command shells such as tcsh and zsh
      (or the MS-DOS utility "4DOS") will recognise many of the command
      sequences implemented by LineEditor.</p>
    </section>

    <section title="Terminology">
      <p><fixme> Some non-RISC OS terms are used, so we can document them.
      </fixme></p>
    </section>

    <section title="Installation instructions">
      <p>Copy the LineEditor module into !Boot.Choices.Boot.Predesk and
      reboot.</p>

      <p>If you wish to change key bindings, see "Changing key bindings"
      below.</p>
    </section>

    <section title="Restrictions">
      <p>LineEditor does not work properly with !Edit task windows (arrow-left
      and arrow-right do not move the cursor as expected). Workaround is to
      use a StrongED or Zap task window.</p>

      <p>In a Zap task window, function keys and Ctrl+key need to be escaped
      (Ctrl-Q) or Zap will try to process the key.</p>
    </section>

    <section title="Technical details">
      <p><fixme> Describe what it does and the key bindings. Explain the
      actions. </fixme></p>

      <p>In a Task Window (ctrl-F12) and in the ShellCLI (F12), LineEditor
      provides command line editing facilities akin to those available in Unix
      shells. When used with Zap, LineEditor adds a "recall line" function to
      Zap's minibuffer.</p>

      <p><list>
          <item>
            <p>Previously-entered commands can be retrieved and stepped
            through by using the up and down arrow keys. These lines can then
            be edited and submitted.</p>
          </item>

          <item>
            <p>Typed text can be inserted at the current cursor position, or
            can replace the character currently at the cursor (these are known
            as "Insert" mode and "Overtype" mode respectively).</p>
          </item>

          <item>
            <p>Tab completion is available. Type the first few letters of a
            filename, then press the Tab key to fill in the rest. If there is
            more than one matching filename, additional characters common to
            all matching files are filled in and the user is prompted with a
            list of matching files: the user can then key in as many extra
            characters as are necessary to identify one of the choices and
            then press Tab again to complete it.</p>
          </item>

          <item>
            <p>An alternative method of filename completion is to type the
            first few letters of a filename, then press Shift-Tab to display
            the first matching filename. Other matching filenames can be
            displayed by pressing Shift-Tab to step forwards through the list,
            or Shift-Ctrl-Tab to step backwards through the list.</p>
          </item>
        </list>For a full list of commands, see the "Key bindings" section
      below.</p>

      <subsection title="Bindable actions">
        <p><fixme> Fill this in better</fixme></p>

        <p>The list of bindable actions (and the default key bindings) are
        listed in the table below. All keys not listed will be bound as
        VANILLA by default.</p>

        <p>If you wish to change key bindings, see "Changing key bindings"
        below.</p>

        <p><value-table head-name="Default key binding" head-number="Action">
            <value number="IGNORE">Totally ignore keypress</value>

            <value number="BEEP">Beep and ignore keypress</value>

            <value name="Ctrl-B" number="LEFT">Move cursor left</value>

            <value name="Ctrl-F" number="RIGHT">Move cursor right</value>

            <value name="Shift-Ctrl-D" number="DELWORD">Delete right to next
            word end</value>

            <value name="Ctrl-E" number="CRIGHT">Goto end of line</value>

            <value name="Ctrl-A" number="CLEFT">Goto start of line</value>

            <value name="Shift-right" number="SRIGHT">Goto start of next
            word</value>

            <value name="Shift-left" number="SLEFT">Goto end of previous
            word</value>

            <value name="Insert" number="TOGGLEINSERT">Toggle insert/overtype
            mode</value>

            <value name="Ctrl-U" number="DELLINE">Delete current line</value>

            <value name="Shift-Insert" number="REMOVELINE">Remove line from
            history</value>

            <value name="Ctrl-I" number="COMPLETE">Tab filename completion
            (fill in as much of filename as possible)</value>

            <value name="Tab" number="COMPLETESHOW">As for COMPLETE, plus show
            matching files</value>

            <value name="Ctrl-L" number="SHOWCOMP">Show all matching files
            (during tab completion)</value>

            <value name="Shift-Tab" number="COMPLETENEXT">Fill in next
            matching file (during tab completion)</value>

            <value name="Shift-Ctrl-Tab" number="COMPLETEPREV">Fill in
            previous matching file (during tab completion)</value>

            <value name="Ctrl-Space" number="SETMARK">Set the "start of
            selection" mark to the cursor position (see "CUT" below).</value>

            <value name="Copy/End" number="COPY">Enable copy mode (toggles if
            not on COPY or arrow keys)</value>

            <value number="UNCOPY">Disable copy mode</value>

            <value name="Ctrl-X" number="SWAPMARK">Swap mark and
            cursor.</value>

            <value name="Ctrl-W" number="CUT">Cut selection (e.g. as a prelude
            to pasting it elsewhere). By default the "selection" is the start
            of the current line, up to and including the cursor - this can be
            changed by means of SETMARK or SWAPMARK described above.</value>

            <value name="Shift-Delete" number="DELETENEXT">Delete character to
            cursor right</value>

            <value name="Delete" number="DELETE">Delete character to cursor
            left</value>

            <value name="Ctrl-Delete" number="WIPEHISTORY">Delete history
            buffer(s)</value>

            <value number="DELTOEND">Delete remainder of line</value>

            <value name="Ctrl-Y" number="PASTE">Paste text at cursor</value>

            <value name="Ctrl-T" number="SWAPCHARS">Swap character with char
            to cursor left</value>

            <value name="Ctrl-Q" number="QUOTE">Handle next keypress as
            OS_ReadLine would</value>

            <value number="VANILLA">Process this key as OS_ReadLine
            would</value>

            <value name="Ctrl-Up" number="CUP">Recall oldest line in
            history</value>

            <value name="Ctrl-Down" number="CDOWN">Recall most recent line in
            history</value>

            <value name="Up" number="UP">Recall next oldest line</value>

            <value name="Down" number="DOWN">Recall next most recent
            line</value>

            <value name="Shift-Up" number="SUP">Recall next oldest line
            matching start</value>

            <value name="Shift-Down" number="SDOWN">Recall next most recent
            line matching start</value>

            <value name="Escape" number="ESCAPE">ESCAPE key pressed</value>

            <value number="FNKEY">Function key F(keycode AND &hex;0F) (F0 =
            PRINT)</value>

            <value name="Ctrl-J" number="RETURN">Finish editing line - don't
            record in history</value>

            <value name="Return" number="ENTER">Finish editing line - ENTER
            into history</value>

            <value name="Ctrl-O" number="FILEROPEN">Open a filer window on a
            directory</value>
          </value-table></p>
      </subsection>

      <subsubsection title="Changing key bindings">
        <p>You may wish to take a backup copy of the LineEditor module before
        changing the key bindings.</p>

        <p><list>
            <item>
              <p>Edit the "DfltKeys" file in the distribution directory
              (saving it with a new name, e.g. "MyKeys") to declare the
              desired key bindings. Note that the key bindings should be in
              order of key number (for a list of key numbers, see "List of
              internal key numbers" in the PRM).</p>
            </item>

            <item>
              <p>Run "RebindKeys" - when prompted, enter the name of the new
              key bindings file (e.g. "MyKeys"). This will amend the copy of
              LineEditor in the distribution directory.</p>
            </item>

            <item>
              <p>Copy the modified version of LineEditor to
              !Boot.Choices.Boot.Predesk and reboot.</p>
            </item>
          </list></p>
      </subsubsection>
    </section>

    <section title="System variables">
      <sysvar-definition description="LineEditor prompt issued whilst editing"
                         name="LineEditor$Edit">
        <use>
          <p>This variable provides the control string which is output when
          editing under LineEditor.</p>

          <fixme>Check that this is what it actually does</fixme>
        </use>

        <related>
          <reference href="?" name="CLI$Prompt" type="sysvar"/>

          <reference name="LineEditor$List" type="sysvar"/>

          <reference name="LineEditor$Type" type="sysvar"/>

          <reference name="LineEditor$Output" type="sysvar"/>
        </related>
      </sysvar-definition>

      <sysvar-definition description="LineEditor prompt issued when listing completions"
                         name="LineEditor$List">
        <use>
          <p>This variable provides the control string which is output when
          the LineEditor is showing the completions which are possible for the
          current command string.</p>

          <fixme>Check that this is what it actually does</fixme>
        </use>

        <related>
          <reference href="?" name="CLI$Prompt" type="sysvar"/>

          <reference name="LineEditor$Edit" type="sysvar"/>

          <reference name="LineEditor$Type" type="sysvar"/>

          <reference name="LineEditor$Output" type="sysvar"/>
        </related>
      </sysvar-definition>

      <sysvar-definition description="LineEditor prompt issued when listing completions types"
                         name="LineEditor$Type">
        <use>
          <p>This variable provides the control string which is output when
          the LineEditor is showing the types of completions which are
          possible for the current command string.</p>

          <fixme>Check that this is what it actually does</fixme>
        </use>

        <related>
          <reference href="?" name="CLI$Prompt" type="sysvar"/>

          <reference name="LineEditor$Edit" type="sysvar"/>

          <reference name="LineEditor$List" type="sysvar"/>

          <reference name="LineEditor$Output" type="sysvar"/>
        </related>
      </sysvar-definition>

      <sysvar-definition description="LineEditor prompt issued when editing completes"
                         name="LineEditor$Output">
        <use>
          <p>This variable provides the control string which is output when
          the LineEditor completes editing.</p>

          <fixme>Check that this is what it actually does</fixme>
        </use>

        <related>
          <reference href="?" name="CLI$Prompt" type="sysvar"/>

          <reference name="LineEditor$Edit" type="sysvar"/>

          <reference name="LineEditor$List" type="sysvar"/>

          <reference name="LineEditor$Type" type="sysvar"/>
        </related>
      </sysvar-definition>
    </section>

    <section title="Service calls">
      <p>Lists the service calls, using service-definition, which are defined
      or used by this component.</p>

      <service-definition description="What the service is for"
                          name="MyServiceName" number="90210">
        <entry>
          <register-use number="0">Register purpose</register-use>

          <register-use number="1">&hex;90210 (reason code)</register-use>
        </entry>

        <exit>
          <register-use number="0">What is returned</register-use>

          <register-use number="1" state="preserved"/>
        </exit>

        <use>
          <p>What the service is for and how it is used.</p>

          <p>This service call is issued by A Component when Something
          Happens.</p>
        </use>

        <related>
          <!-- <reference type="sysvar" name="Sys$Variable" /> -->
        </related>
      </service-definition>
    </section>

    <section title="SWI calls">
      <swi-definition description="Sets global LineEditor options"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_SetOptions" number="83380"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">Buffer size, or 0 for the default buffer
          size</register-use>

          <register-use number="1"><p>Feature flags:</p> <p> <bitfield-table>
              <bit number="0">TaskWindows have local buffers</bit>

              <bit number="1">Trailing dots will be appended to directory
              completions</bit>

              <bit number="2">Default to overtype mode</bit>

              <bit number="3">Keep duplicate lines in history</bit>

              <bit number="4">Don't do <userinput>~</userinput>
              expansion</bit>

              <bit number="5">Don't de <userinput>!</userinput>-type events
              (eg <userinput>!!</userinput>)</bit>

              <bit number="6">Don't do <userinput>^two^three</userinput> type
              replacements</bit>
            </bitfield-table> </p></register-use>

          <register-use number="2">Minimum length to record</register-use>

          <register-use number="3">Maximum length to record, or 0 for no
          maximum</register-use>

          <register-use number="4"><p>Cursor shape usage:</p> <bitfield-table>
              <bit number="0" state="clear">Normal cursor is underline</bit>

              <bit number="0" state="set">Normal cursor is block</bit>

              <bit number="1" state="clear">Normal cursor flashes</bit>

              <bit number="1" state="set">Normal cursor is steady</bit>

              <bit number="2-7" state="reserved"/>

              <bit number="8" state="clear">Overtype cursor is underline</bit>

              <bit number="8" state="set">Overtype cursor is block</bit>

              <bit number="9" state="clear">Overtype cursor flashes</bit>

              <bit number="9" state="set">Overtype cursor is steady</bit>

              <bit number="10-31" state="reserved"/>
            </bitfield-table></register-use>
        </entry>

        <exit/>

        <use>
          <p>This SWI is used to update the global options used by the
          LineEditor module..</p>
        </use>

        <related>
          <reference name="LineEditor_GetOptions" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Reads global LineEditor options"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_GetOptions" number="83381"
                      processor-mode="SVC" re-entrant="no">
        <entry/>

        <exit>
          <register-use number="0">Buffer size in kilobytes, or 0 for the
          default buffer size</register-use>

          <register-use number="1"><p>Feature flags (as for <reference
          name="LineEditor_SetOptions" type="swi"/>):</p> <p> <bitfield-table>
              <bit number="0">TaskWindows have local buffers</bit>

              <bit number="1">Trailing dots will be appended to directory
              completions</bit>

              <bit number="2">Default to overtype mode</bit>

              <bit number="3">Keep duplicate lines in history</bit>

              <bit number="4">Don't do <userinput>~</userinput>
              expansion</bit>

              <bit number="5">Don't de <userinput>!</userinput>-type events
              (eg <userinput>!!</userinput>)</bit>

              <bit number="6">Don't do <userinput>^two^three</userinput> type
              replacements</bit>
            </bitfield-table> </p></register-use>

          <register-use number="2">Minimum length to record</register-use>

          <register-use number="3">Maximum length to record, or 0 for no
          maximum</register-use>

          <register-use number="4"><p>Cursor shape usage (as for <reference
          name="LineEditor_SetOptions" type="swi"/>):</p> <bitfield-table>
              <bit number="0" state="clear">Normal cursor is underline</bit>

              <bit number="0" state="set">Normal cursor is block</bit>

              <bit number="1" state="clear">Normal cursor flashes</bit>

              <bit number="1" state="set">Normal cursor is steady</bit>

              <bit number="2-7" state="reserved"/>

              <bit number="8" state="clear">Overtype cursor is underline</bit>

              <bit number="8" state="set">Overtype cursor is block</bit>

              <bit number="9" state="clear">Overtype cursor flashes</bit>

              <bit number="9" state="set">Overtype cursor is steady</bit>

              <bit number="10-31" state="reserved"/>
            </bitfield-table></register-use>
        </exit>

        <use>
          <p>This SWI is used to read the global options used by the
          LineEditor module.</p>

          <fixme>Make the bitfield tables into tables in the Technical
          Details?</fixme>
        </use>

        <related>
          <reference name="LineEditor_SetOptions" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Create a private LineEditor buffer"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_CreateBuffer" number="83382"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">Buffer size in kilobytes, or 0 for the
          default buffer size</register-use>

          <register-use number="1">Expansion word (0), task handle or
          -1</register-use>

          <register-use number="2">Expansion word if R1 is a task handle, or
          unused if not</register-use>
        </entry>

        <exit>
          <register-use number="0">LineEditor history buffer id, or 0 if a
          buffer could not be created</register-use>
        </exit>

        <use>
          <p>This SWI is used to create a private use LineEditor buffer. If
          the value in R1 is a task handle, the buffer will be deleted
          automatically when the task exits.</p>

          <fixme>A better explanation of the expansion word is
          required</fixme>
        </use>

        <related>
          <reference name="LineEditor_DeleteBuffer" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Deletes a private LineEditor buffer"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_DeleteBuffer" number="83383"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">LineEditor history buffer id</register-use>
        </entry>

        <exit/>

        <use>
          <p>This SWI is used to delete a private use LineEditor buffer
          created with <reference name="LineEditor_CreateBuffer"
          type="swi"/>.</p>
        </use>

        <related>
          <reference name="LineEditor_CreateBuffer" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Sets the position in the LineEditor history"
                      fiqs="enabled" irqs="undefined" name="LineEditor_SetPos"
                      number="83384" processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">LineEditor history buffer id</register-use>

          <register-use number="1"><p>line number to select, based at 0, or
          special code:</p> <value-table>
              <value number="&amp;7FFFFFFF">Last line (end of buffer)</value>

              <value number="&amp;80000000">Previous line, wrapping to
              end</value>

              <value number="&amp;80000001">Previous line, stopping at
              start</value>

              <value number="&amp;80000002">Next line, stopping at end</value>

              <value number="&amp;80000003">Next line, wrapping to
              start</value>
            </value-table></register-use>
        </entry>

        <exit/>

        <use>
          <p>This SWI is used to set the position in the history for a private
          use LineEditor buffer.</p>
        </use>

        <related>
          <reference name="LineEditor_GetPos" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Reads the position in the LineEditor history"
                      fiqs="enabled" irqs="undefined" name="LineEditor_GetPos"
                      number="83385" processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">LineEditor history buffer id</register-use>
        </entry>

        <exit>
          <register-use number="1">line number in the buffer, based at
          0</register-use>
        </exit>

        <use>
          <p>This SWI is used to read the position in the history of a private
          use LineEditor buffer.</p>
        </use>

        <related>
          <reference name="LineEditor_SetPos" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Read the text within a line in the LineEditor history"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_GetLine" number="83386"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">LineEditor history buffer id</register-use>

          <register-use number="1">Pointer to a buffer to fill</register-use>

          <register-use number="2">Size of the buffer</register-use>
        </entry>

        <exit>
          <register-use number="2">Number of characters written to the buffer,
          excluding the terminator</register-use>
        </exit>

        <use>
          <p>This SWI is used to read the text line from the current position
          in the LineEditor buffer. The line read will be zero terminated.</p>

          <fixme>When the data doesn't fit, do we get an error?</fixme>
        </use>

        <related>
          <!--<reference type="swi" name="LineEditor_SetPos" />-->
        </related>
      </swi-definition>

      <swi-definition description="Append a line to the LineEditor history"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_AppendLine" number="83387"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">LineEditor history buffer id</register-use>

          <register-use number="1">Pointer to a line to add, control
          terminated</register-use>
        </entry>

        <exit>
          <register-use number="2">Number of characters written to the buffer,
          excluding the terminator</register-use>
        </exit>

        <use>
          <p>This SWI is used to append a line to the history of the
          LineEditor buffer.</p>

          <fixme>Is there an error if it cannot be added?</fixme>
        </use>

        <related>
          <reference name="LineEditor_DeleteLine" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Append the last line from the LineEditor history"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_DeleteLine" number="83388"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">LineEditor history buffer id</register-use>
        </entry>

        <exit/>

        <use>
          <p>This SWI is used to delete the last line from the history of the
          LineEditor buffer.</p>

          <fixme>Is there an error if there is no last line?</fixme>
        </use>

        <related>
          <reference name="LineEditor_DeleteLine" type="swi"/>
        </related>
      </swi-definition>

      <swi-definition description="Read information about the current LineEditor buffer"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_ReadInfo" number="83389"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">Task handle to read</register-use>
        </entry>

        <exit>
          <register-use number="0">Length of the line currently being edited
          in the task, or -2 if task is not known, or -1 if there is no edit
          in progress</register-use>

          <register-use number="1">cursor position</register-use>
        </exit>

        <use>
          <p>This SWI is used read information about the line editing in a
          given task. Editors may use this to ensure that the cursor position
          is properly reflected.</p>

          <p>This SWI is only available from LineEditor 2.73 onwards. <fixme>
          This should be a tag </fixme></p>
        </use>

        <related>
          <!--<reference type="swi" name="LineEditor_DeleteLine" />-->
        </related>
      </swi-definition>

      <swi-definition description="Read a line of input from the user"
                      fiqs="enabled" irqs="undefined"
                      name="LineEditor_ReadLine" number="8338A"
                      processor-mode="SVC" re-entrant="no">
        <entry>
          <register-use number="0">Pointer to buffer to fill</register-use>

          <register-use number="1">Size of the buffer</register-use>

          <register-use number="2">Lowest character allowed</register-use>

          <register-use number="3">Highest character allowed</register-use>

          <register-use number="4">Password character (if password bit
          set)</register-use>

          <register-use number="5"><p>Flags:</p> <bitfield-table>
              <bit number="0">Password style display (uses R4 in place of all
              character output)</bit>

              <bit number="1">Do not echo control characters</bit>

              <bit number="2-31" state="reserved"/>
            </bitfield-table></register-use>

          <register-use number="6">LineEditor history buffer id</register-use>
        </entry>

        <exit>
          <register-use number="0" state="corrupted"/>

          <register-use number="1">Characters read into buffer, excluding
          terminator</register-use>

          <processor-flag name="C">Set if Escape was pressed</processor-flag>
        </exit>

        <use>
          <p>This SWI is used a line of input from the user, using a specific
          LineEditor history buffer.</p>

          <p>This SWI is only available from LineEditor 2.74 onwards. <fixme>
          This should be a tag </fixme></p>
        </use>

        <related>
          <reference href="?" name="OS_ReadLine" type="swi"/>

          <reference href="?" name="ReadLineV" type="vector"/>
        </related>
      </swi-definition>

      <p><extended-example> </extended-example></p>
    </section>

    <section title="Error messages">
      <p>Lists the errors, using error-definition, which are reported by this
      component.</p>

      <error-definition description="Meaning of the error message"
                        name="MyErrorMessage" number="90210">
        <use>
          <p>Why the error is reported.</p>
        </use>

        <related>
          <reference name="Module_Register" type="swi"/>
        </related>
      </error-definition>
    </section>

    <section title="*Commands">
      <command-definition description="Saves the LineEditor history to a file"
                          name="SaveHistory">
        <syntax><userreplace>filename</userreplace></syntax>

        <parameter name="filename">Filename to save the history
        as.</parameter>

        <use>
          <p>This command saves the history buffer, or most recently used
          buffer if you use local buffers, as a text file.</p>
        </use>

        <example>
          <command>*SaveHistory LineHistory</command>
        </example>

        <related>
          <reference name="LoadHistory" type="command"/>
        </related>
      </command-definition>

      <command-definition description="Loads the LineEditor history from a file"
                          name="ListHistory">
        <syntax><userreplace>filename</userreplace></syntax>

        <parameter name="filename">Filename to load the history
        from</parameter>

        <use>
          <p>This command loads the history buffer, or most recently used
          buffer if you use local buffers, from a text file. Loading each line
          is processed through the usual min/max length checks, although
          currently lines over 255 characters are ignored regardless.</p>
        </use>

        <example>
          <command>*LoadHistory LineHistory</command>
        </example>

        <related>
          <reference name="LoadHistory" type="command"/>
        </related>
      </command-definition>

      <command-definition description="Show the current history" name="Recall">
        <use>
          <p>This command shows the current history.</p>

          <fixme>Is that right?</fixme>
        </use>

        <example>
          <command>*Recall</command>
        </example>

        <related>
          <!--<reference type="command" name="LoadHistory" />-->
        </related>
      </command-definition>
    </section>
  </chapter>

  <!-- MetaData -->

  <meta>
    <maintainer>
      <email address="email@nowhere.com" name="Person's name"/>
    </maintainer>

    <disclaimer>
      <p>© Your name, the year. Whatever you need to say.</p>
    </disclaimer>

    <history>
      <revision author="Who changed it" date="dd mmm yyyy" number="1"
                title="Initial version">
        <change>What you did</change>
      </revision>
    </history>

    <related>
      <reference href="http://some.site/moredocs.html" type="link"/>
    </related>
  </meta>
</riscos-prm>
