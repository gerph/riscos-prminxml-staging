<?xml version="1.0"?>
<!DOCTYPE riscos-prm PUBLIC "-//Gerph//DTD PRM documentation 1.00//EN" 
                            "http://www.movspclr.co.uk/dtd/100/prm.dtd">

<riscos-prm>
<chapter title="The Image File Renderer">
<section title="Introduction and Overview">

<p>A number of graphics formats are supported natively by RISC OS. JPEG,
DrawFiles and Sprites are directly renderable, and PNGs are supported
through a number of conversion calls. Each of these formats, however, is
rendered using slightly different calls. The ImageFileRender module
simplifies rendering these (and potentially other third party) image files.
</p>

<p>All graphics formats have two things in common :</p>
<p><list>
  <item><p>They cover a region (even empty files must say what space they
           cover).</p></item>
  <item><p>They have a resolution at which they are drawn.</p></item>
</list></p>

<p>The region they cover is known as the 'bounding box'. For many graphics
formats, this will be aligned with the origin - for example a bitmap
graphic. For others, this bounding box may be elsewhere in the image - for
example vector formats such as DrawFiles.</p>

<p>The resolution at which they have been drawn describes how accurate the
images is stored. Usually this is stored in 'dots per inch' (DPI) along
with the image itself. Screen resolution is usually - this depends on the
eigenfactors for the screen mode in use - treated as 90 DPI. Some formats
may use much more accurate internal representations than this; for example
DrawFiles are stored at 46080 DPI.</p>

<p>For the purposes of rendering the image file, we ignore the colour depth
because the rendering process will generate its results in the most accurate
manner possible for output depth.</p>

<p>Images may be rendered using a number of transformation types, allowing them
to be rendered to fit a region, to a scale, or using a more general
transformation.</p>

<p>Within each image file there may be a number of individual images. These
can be accessed by a sequence number which indicates their logical location
within the file. The images may be related - as would be the case with
frames of an animation - or they may be unrelated - as would be the case
with a collection of resources.</p>

<p>When accessing images, additional information may be provided to the
renderer which may perform specific operation on the image. This extra
data is specific to the renderer and cannot be handled generically.</p>

</section>

<section title="Technical Details">

<subsection title="Sequence numbers">

<p>Graphics files may contain multiple logical images which may either be
frames of an animation, alternate versions, or other image resources.
These images are accessed through a sequence number which must be supplied
to all images. A sequence number of 0 will render the 'default' image
within the file. This may be the first image in some formats, the last
in others, or some arbitrary image. A sequence number higher than that of
the last image should be treated as the last image. A sequence number of
1 indicates the first image should be processed.</p>

</subsection>

<subsection title="Rendering quality">

<p>Image files may contain data which is more accurate than can be represented
by the display. This is usually the case for bitmap images at high colour
depths and almost always the case for bitmap images. In order to allow some
control over the quality of the rendered image (and usually the rendering
speed) a 'quality' parameter can be provided to the renderer. This is a
value from 1 to a renderer specific limit (with a maximum of 15) and will
be bounded to the maximum that the renderer supports. Thus, if the highest
quality is required, a value of 15 should be supplied. If the lowest quality
is required, a value of 1 should be supplied. In the majority of cases,
however, the 'default' will be required. This is a value which the renderer
feels is suitable for most operations and does not require excessive
processing to complete. To request the default quality, a value of 0 should
be specified as the quality.</p>

</subsection>

<subsection title="Transformation types">

<p>Graphics files may be transformed in a number of ways. This allows us to
provide a simpler interface for rendering based on the requirements of the
application. At present, there are three transformation types provided by
the module:</p>

<p>
<value-table>
  <value number="0">Render to fit</value>
  <value number="1">Render scaled</value>
  <value number="2">Render transformed</value>
</value-table>
</p>

<p>For all rendering types an x and y origin are supplied from which all
operations will be based. This allows the same details to be used for
the fit, scale or transform regardless of the images location on the
screen.</p>

<category title="Render to fit">

<p>When rendering to fit, a width and height must be supplied by the
application. The image file will be scaled to fit within this region.
In addition, a border and angle may be provided to specify an area
around the image which should be left clear, and to specify the angle
through which the image should be rotated.</p>

<p>Rotation is performed anti-clockwise. The centre of the rotation is
not strictly relevant to this operation because the image is always
scaled to fit the width and height supplied.</p>

<p>The 'fit' block has the following structure:</p>

<p>
<offset-table>
  <offset number="0">width (in OS units)</offset>
  <offset number="4">height (in OS units)</offset>
  <offset number="8">border (to apply to all edges)</offset>
  <offset number="12">angle (in degrees, as a 16.16 fixed point value)</offset>
</offset-table>
</p>

</category>

<category title="Render scaled">

<p>When rendering scaled, a pair of multiplication and division factors
should be supplied which describe the scale at which the image should
be rendered. The scale block is a standard RISC OS scale block (as used
by SpriteExtend)</p>

<p>The scaling block has the following structure :</p>

<p>
<offset-table>
  <offset number="0">X multiplication factor</offset>
  <offset number="4">Y multiplication factor</offset>
  <offset number="8">X division factor</offset>
  <offset number="12">Y division factor</offset>
</offset-table>
</p>

</category>

<category title="Render transformed">

<p>Rendering images through a transformation matrix is the most flexible
method of rendering that the ImageFileRender module provides. Transformation
matrices are provided in standard RISC OS tranformation blocks (as used by
SpriteExtend, Draw, DrawFile and others).</p>

<p>The transformation has the following structure:</p>
  
<p>
<offset-table>
  <offset number="0">m00</offset>
  <offset number="4">m10</offset>
  <offset number="8">m01</offset>
  <offset number="12">m11</offset>
  <offset number="16">m20</offset>
  <offset number="20">m21</offset>
</offset-table>
</p>

<p>where the matrix is constructed:</p>
<p>{ m00, m01, 0 }</p>
<p>{ m10, m11, 0 }</p>
<p>{ m20, m21, 1 }</p>

<p>m00, m01, m10, and m11 are 16.16 fixed point values.</p>

<p>m20 and m21 are 24.8 fixed point values.</p>

</category>

<category title="Arbitrary transformations">

<p>Not all image formats support arbitrary transformations. Because of this,
certain formats will be unable to render when a complex transformation is
in use. A typical example of such limitations is that of JPEGs. The internal
renderer can only render JPEGs as a scaled object. If rotation, or other
complex transformations are applied to files which are not capable of those
transformations, an error will be returned.</p>

</category>

</subsection>


<subsection title="Clipping">

<p>All images will be clipped to the standard graphics rectangles. If an image
must not pass outside a region, a graphics window should be used. This can
be set through a VDU 24 sequence.</p>

</subsection>


<subsection title="Image file origins">

<p>Whilst most images are based at the origin, some images will have a bounding
box which are not. When the image is rendered 'to fit', the image origin
is implicitly ignored. When scaling and transforming however, the origin is
maintained and will be scaled with the image itself. Because this can make
manipulating such images more complex, this origin offset can be negated
by the ImageFileRender module. In this mode, the image can be treated as if
it does not have any offset from the origin.</p>

</subsection>


<subsection title="Colour mapping">

<p>In order to provide highlighting and other colour manipulation on the image,
the ImageFileRender module can use colour mapping functions (as used by
SpriteExtend, DrawFile, and ColourTrans). These allow the colours in the
image to be manipulated to provide effects such as highlighting or
shading.</p>

<category title="Extensions for more complex colour mapping">

<p>The operations that can be provided in a generic manner by the
ImageFileRender module do not cover the full range of operations that might
be applied to every image file format. Because of this, extension data
may be provided which is specific to the renderer in use. Because each
renderer may provide specific data to enable it to render images, and there
may be multiple providers of rendering facilities, a 'magic' identifier is
allocated to each renderer. This is ensures the the renderer is not given
data in a form which it does not understand.</p>

<p>Where a magic identifier is supplied and a suitable renderer is available,
it will be used. If no suitable renderer can be found, the last registered
renderer will be used. This ensures that the where extension data is used
it is passed to the appropriate renderer, and falls back to using the most
recent renderer installed.</p>

<p>The extension data block must be word aligned, and the first word contains
the magic identifier for the render that it is intended for. The remainder
of the extension data block is specific to the renderer in use.</p>

<p>The magic identifier may be any 32bit value, but we recommend that these
are registered with RISCOS Ltd to ensure that there are no duplicated
identifiers. At present, allocations are of the form &hex;6699ccii, where cc
indicates the company or individual producing the renderer, and ii is
some image format number at the company or individual's discretion.</p>

</category>

</subsection>


<subsection title="Sprite file extensions">

<p>When rendering sprite files, by default the first sprite is rendered from
the file. This covers the majority of the situations that it will be
required, but where different sprites are required, the extension block
describes which to use. The identifier for the RISCOS Ltd sprite renderer
is &hex;66990101. The named sprite will only be used when the sequence number
is left as 'default'.</p>

<p>
<offset-table>
  <offset number="0">&hex;66990101</offset>
  <offset number="4">Sprite name, up to 12 characters</offset>
</offset-table>
</p>

</subsection>


<subsection title="Renderers">

<category title="Custom renderers">

<p>Custom renderers may be registered with the ImageFileRender module. These
renderers can provided additional rendering facilities for third party
filetypes, or provide additional facilities over those of the standard
renderers.</p>

<p>Renderers have four components:</p>
<p><list type="ordered">
  <item><p>A routine which calculates the bounding box and resolution of an
           image</p></item>
  <item><p>A routine which renders an image</p></item>
  <item><p>A routine which declares fonts in a document (may be omitted)
           </p></item>
  <item><p>A routine which returned information about an image</p></item>
</list></p>

<p>In addition, they provide a number of informational fields which describe
the renderer's capabilities:</p>
<p><list>
  <item><p>The filetype that the renderer applies to</p></item>
  <item><p>The name of the renderer (including the version and author)
           </p></item>
  <item><p>A flags word that describes the renderers capabilities
           </p></item>
  <item><p>The renderers 'magic' identifier (or 0 if it provides no special
           operations)</p></item>
</list></p>

</category>

<category title="Renderer name">

<p>The renderer name provides details about the renderer in order that
diagnostics may be performed and information about the installed renderers
is available. The renderer name consists of three, tab (ASCII 9) separated,
fields:</p>

<p><list>
  <item><p>The renderer name</p></item>
  <item><p>The version number in the form x.xx</p></item>
  <item><p>The authors (or publishers) name</p></item>
</list></p>

</category>

<category title="Renderer flags">

<p>Not all renderers have the same capabilities, as stated earlier. The
flags provide details to ImageFileRender of the capabilities of the
renderer. This is a bit field, structured:</p>

<p>
<bitfield-table>
  <bit number="0-1"><p>Renderer transformation capabilities:</p>
    <value-table>
       <value number="0">Renderer cannot draw anything but identity 
       scaling and translation</value>
       <value number="1">Renderer can translate and scale, but scaling 
       must be by identical factors</value>
       <value number="2">Renderer can translate and scale by any values 
       in both axes</value>
       <value number="3">Renderer supports any form of transformation
       </value>
    </value-table>
    
    <p>These bits should be set to the capabilities of the renderer.</p>
    <p>Attempts to render files of which the capabilities word indicates 
    are not possible by the renderer will be faulted by ImageFileRender 
    module.</p>
  </bit>
  <bit number="2">
    <p>Renderer supports colour mapping.</p>
    <p>This bit should be set if the renderer can perform colour mapping.
    If unset, attempts to use colour mapping on this file type will be 
    faulted by ImageFileRender.</p>
  </bit>
  <bit number="3">
    <p>Renderer can draw irregular shapes so must be called to calculate 
    bounding boxes.</p>
    
    <p>This bit should be set if transforming a shape using a complex
    matrix (eg skew or rotate) may result in a different bounding
    box than that which would be generated for a rectangular area.
    If unset, the renderer will be called to calculate the bounds
    of an identity transform only. ImageFileRender will perform
    the remainder of the calculations.</p>
    <p>If a renderer can only render rectangular areas then leaving
    this bit clear simplifies the implementation.</p>
  </bit>
  <bit number="4-7">
    <p>Maximum number of 'quality' levels supported (1-15).</p>
    <p>The highest quality level which is supported by the renderer.</p>
    <p>If the quality level requested by a client exceeds this, the
    renderer will be called with this value.</p>
  </bit>
  <bit number="8-11">
    <p>Default 'quality' level to use (1-15).</p>
    <p>Where quality settings are omitted (ie when 'default' quality
    is selected) the default quality will be passed to the renderer.
    A value of 0 means that quality levels are ignored.</p>
  </bit>
</bitfield-table>
</p>

</category>

</subsection>

</section>

<section title="Service calls">
<service-definition name="ImageFileRender_Started"
                    number="80D40"
                    description="ImageFileRenderer has initialised">
<entry>
 <register-use number="0">API version (102 at present)</register-use>
 <register-use number="1">&hex;80D40</register-use>
</entry>

<exit>
</exit>

<use>
  <p>This service is issued after the ImageFileRender module has initialised.
Renderers should register themselves with the module.</p>
</use>

<related>
  <reference type="service" name="ImageFileRender_Dying" />
</related>

</service-definition>


<service-definition name="ImageFileRender_Dying"
                    number="80D41"
                    description="ImageFileRenderer about to finalise">
<entry>
 <register-use number="0">API version (102 at present)</register-use>
 <register-use number="1">&hex;80D41</register-use>
</entry>

<exit>
</exit>

<use>
<p>This service is issued as the ImageFileRender module finalises to notify
clients that it is no longer providing rendering facilities.</p>
</use>

<related>
  <reference type="service" name="ImageFileRender_Started" />
</related>

</service-definition>


<service-definition name="ImageFileRender_RendererChanged"
                    number="80D42"
                    description="A renderer has initialised or finalised">
<entry>
 <register-use number="0">API version (102 at present)</register-use>
 <register-use number="1">&hex;80D42</register-use>
 <register-use number="2">Filetype affected</register-use>
</entry>

<exit>
</exit>

<use>
<p>This service is issued when a renderer registers or deregisters with the
ImageFileRender module. Clients which have cached details of other renderers
should re-read any renderer values necessary after checking whether the
filetype matches those which they are interested in.</p>
</use>

<related>
 <reference type="swi" name="ImageFileRender_Register" />
</related>

</service-definition>



</section>


<section title="SWI calls">
<swi-definition name="ImageFileRender_Render"
                number="562C0"
                description="Render an image"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Rendering flags:
   <bitfield-table>
     <bit number="0-2">Transformation type:
       <value-table>
         <value number="0">Render to fit</value>
         <value number="1">Render scaled</value>
         <value number="2">Render transformed</value>
       </value-table>
     </bit>
     <bit number="3">Colour mapping function supplied</bit>
     <bit number="4">Ignore document origin</bit>
     <bit number="5" state="reserved" />
     <bit number="6-8">Quality to render at:
       <value-table>
         <value number="0">Use default quality</value>
         <value number="1">Lowest quality</value>
         <value number="2-14">Renderer specific values</value>
         <value number="15">Highest quality</value>
       </value-table>
     </bit>
     <bit number="9-16" state="reserved" />
     <bit number="17-31" state="reserved" />
   </bitfield-table>
 </register-use>
 <register-use number="1">Filetype</register-use>
 <register-use number="2">Pointer to data to render</register-use>
 <register-use number="3">Length of data</register-use>
 <register-use number="4">Pointer to extension data, or 0 if
none</register-use>
 <register-use number="5">Image sequence number, or 0 for default 
image</register-use>
 <register-use number="6">X coord for origin</register-use>
 <register-use number="7">Y coord for origin</register-use>
 <register-use number="8">Transformation data:
   <value-table head-value="Transformation type in R0>
     <value number="0" name="Pointer to size">
       <offset-table>
         <offset number="0">Width</offset>
         <offset number="4">Height</offset>
         <offset number="8">Border to use</offset>
         <offset number="12">Angle to use (in degrees as 16.16)</offset>
       </offset-table>
       <p>Image file origin is ignored</p>
     </value>
     <value number="1" name="Pointer to scale block">
       <offset-table>
         <offset number="0">X mult</offset>
         <offset number="4">Y mult</offset>
         <offset number="8">X div</offset>
         <offset number="12">Y div</offset>
       </offset-table>
     </value>
     <value number="2" name="Pointer to transformation matrix">
       <p>Standard draw transformation matrix format</p>
     </value>
   </value-table>
 </register-use>
 <register-use number="9">Pointer to colour map descriptor</register-use>
</entry>
<exit>
</exit>
<use>
<p>This SWI is used to render an image file.</p>

</use>

<related>
  <reference type="entry" name="IFR_Render" />
</related>

</swi-definition>


<swi-definition name="ImageFileRender_BBox"
                number="562C1"
                description="Calculates an image's bounding box"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Rendering flags:
   <bitfield-table>
     <bit number="0-2">Transformation type:
       <value-table>
         <value number="0">Render to fit</value>
         <value number="1">Render scaled</value>
         <value number="2">Render transformed</value>
       </value-table>
     </bit>
     <bit number="3" state="reserved" />
     <bit number="4">Ignore document origin</bit>
     <bit number="5">Return in OS units (otherwise bounding box will
     be returned in draw units</bit>
   </bitfield-table>
 </register-use>
 <register-use number="1">Filetype</register-use>
 <register-use number="2">Pointer to data to render</register-use>
 <register-use number="3">Length of data</register-use>
 <register-use number="4">Pointer to extension, or 0 if none</register-use>
 <register-use number="5">Image sequence number, or 0 for default image</register-use>
 <register-use number="6">Pointer to transformation data (see above)
 </register-use>
 <register-use number="7">Pointer to bounding box to fill in</register-use>
</entry>

<exit>
</exit>

<use>
<p>This SWI is used to calculate the bounding box for a transformation
operation.</p>
</use>

<related>
  <reference type="entry" name="IFR_BBox" />
</related>

</swi-definition>


<swi-definition name="ImageFileRender_Transform"
                number="562C2"
                description="Return transformation matrix for render operation"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Rendering flags:
   <bitfield-table>
     <bit number="0-2">Transformation type:
       <value-table>
         <value number="0">Render to fit</value>
         <value number="1">Render scaled</value>
         <value number="2">Render transformed</value>
       </value-table>
     </bit>
     <bit number="3" state="reserved" />
     <bit number="4">Ignore document origin</bit>
   </bitfield-table>
 </register-use>
 <register-use number="1">Filetype</register-use>
 <register-use number="2">Pointer to data to render</register-use>
 <register-use number="3">Length of data</register-use>
 <register-use number="4">Pointer to extension, or 0 if none</register-use>
 <register-use number="5">Image sequence number</register-use>
 <register-use number="6">Pointer to transformation data</register-use>
 <register-use number="7">Pointer to output transformation block to fill in</register-use>
 
</entry>
<exit>
</exit>
<use>
<p>This SWI is used to calculate the transformation matrix that would be
used for an operation without performing that operation. Where clients wish to
combine a transform matrix with the operation applied by the scaling specified,
this call can obtain the transformation matrix which ImageFileRender will use.</p>

</use>

<related>
</related>

</swi-definition>


<swi-definition name="ImageFileRender_DeclareFonts"
                number="562C3"
                description="Declare fonts prior to printing"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Flags (reserved, must be 0)</register-use>
 <register-use number="1">Filetype</register-use>
 <register-use number="2">Pointer to data to render</register-use>
 <register-use number="3">Length of data</register-use>
 <register-use number="4">Pointer to extension data, or 0 if none</register-use>
 <register-use number="5">Image sequence number</register-use>
 <register-use number="6">Flags to pass to PDriver_DeclareFont</register-use>
</entry>
<exit>
 <register-use number="0-6" state="preserved" />
</exit>
<use>
<p>This SWI should be used when printing images using the ImageFileRender
module before any printing operations begin. Refer to the section 'Declare
the fonts your document uses' in the chapter on Printing for more details.
</p>

</use>

<related>
  <reference type="entry" name="IFR_DeclareFonts" />
</related>

</swi-definition>


<swi-definition name="ImageFileRender_Info"
                number="56264"
                description="Discover miscellaneous image information"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Flags (reserved, must be 0)</register-use>
 <register-use number="1">Filetype</register-use>
 <register-use number="2">Pointer to data to render</register-use>
 <register-use number="3">Length of data</register-use>
 <register-use number="4">Pointer to extension data, or 0 if none</register-use>
 <register-use number="5">Image sequence number</register-use>
 <register-use number="6">Query type:
   <value-table>
     <value number="&hex;00000000">Base details</value>
     <value number="&hex;00000001-&hex;0000FFFF">Reserved for system
use</value>
     <value number="&hex;00001000-&hex;00FFFFFF">Reserved for developers</value>
     <value number="&hex;00FF0000-&hex;00FFFFFF">Reserved for private
use</value>

   </value-table>
   Others are reserved for future expansion.
 </register-use>
 <register-use number="7">Pointer to query block</register-use>
 <register-use number="8">Length of query block</register-use>
</entry>
<exit>
 <register-use number="8">
   <p>If successful, R8 returns the length of block used.</p>
   <p>If the block was too small, R8 returns a negative value showing how much
space was required. If another error occurs, R8 will be positive.</p>
 </register-use>
</exit>
<use>

<p>This SWI should be used to find out information which is not provided by
the generic APIs. It may be used (for example) to read the time between
frames for a custom renderer, or to read additional information about the
image which would otherwise not be available.</p>

<p>The base details query returns the following:</p>
<p>
  <offset-table>
    <offset number="0">Sequence number</offset>
    <offset number="4">X DPI</offset>
    <offset number="8">Y DPI</offset>
    <offset number="12">Colour type:
      <value-table>
        <value number="0">Unspecified colour type (usually 'free' colour
selection)</value>
        <value number="1">1bpp RGB</value>
        <value number="2">2bpp RGB</value>
        <value number="3">4bpp RGB</value>
        <value number="4">8bpp RGB</value>
        <value number="5">16bpp RGB</value>
        <value number="6">24bpp RGB</value>
        <value number="7">CMYK</value>
        <value number="Others">Reserved</value>
      </value-table>
    </offset>
    <offset number="16">Image flags:
      <bitfield-table>
        <bit number="0">If set, the image is solid and covers the entire
bounding box described. If clear, the image may have sections which reflect
the background colour.</bit>
        <bit number="1-31" state="reserved" />
      </bitfield-table>
    </offset>
  </offset-table>
</p>

<p>The base query is used to get generic information on an image in the file 
which was not necessary for the rendering of the file. This call is most 
commonly used to find the sequence number of the default and last logical image
within a file. The sequence number may be set to &hex;FFFFFFFF to indicate that
the sequence number is not known. This might be the case if the format
has no indication of the number of images present.</p>

<p>The image flags provide additional information about the image which might
be useful to renderers. The only defined flag at present is that indicating
if the image is 'solid' or not. This can be used by clients to decide whether
drawing a background behind the image is neccessary or not.</p>

</use>

<related>
  <reference type="entry" name="IFR_Info" />
</related>

</swi-definition>


<swi-definition name="ImageFileRender_RendererInfo"
                number="56265"
                description="Discover information on the renderer"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Flags (must be 0)</register-use>
 <register-use number="1">Filetype</register-use>
 <register-use number="2">Magic identifier</register-use>
</entry>
<exit>
 <register-use number="0">Pointer to renderer definition block (read only)</register-use>
 <register-use number="1">Pointer to renderer name</register-use>
</exit>
<use>
<p>This SWI is used to return information about a renderer.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_EnumerateRenderers" />
</related>

</swi-definition>


<swi-definition name="ImageFileRender_Register"
                number="56266"
                description="Register a renderer"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Flags (reserved, must be 0)</register-use>
 <register-use number="1">Pointer to definition (all will be copied):
   <offset-table>
     <offset number="0">API version (102 at present)</offset>
     <offset number="4"><reference type="category" name="Renderer flags" /></offset>
     <offset number="8">Filetype</offset>
     <offset number="12">Magic value, or 0 if none</offset>
     <offset number="16">Pointer to name</offset>
     <offset number="20">Workspace value for R12</offset>
     <offset number="24">Pointer to start entry point (<reference type="entry" name="IFR_Start" />)</offset>
     <offset number="28">Pointer to stop entry point (<reference type="entry" name="IFR_Stop" />)</offset>
     <offset number="32">Pointer to render entry point (<reference type="entry" name="IFR_Render" />)</offset>
     <offset number="36">Pointer to bounding box entry point (<reference type="entry" name="IFR_BBox" />)</offset>
     <offset number="40">Pointer to declare fonts entry point (<reference type="entry" name="IFR_DeclareFonts" />)</offset>
     <offset number="44">Pointer to information entry point (<reference type="entry" name="IFR_Info" />)</offset>
   </offset-table>
   <p>Or use 0 to get the current API version</p>
 </register-use>
</entry>
<exit>
 <register-use number="1">API version (even if an error occurred)</register-use>
</exit>
<use>
<p>This SWI is used to register a new renderer.</p>

</use>

<related>
 <reference type="swi" name="ImageFileRender_Deregister" />
</related>

</swi-definition>


<swi-definition name="ImageFileRender_Deregister"
                number="56267"
                description="Deregister a renderer"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Flags (reserved, must be 0)</register-use>
 <register-use number="1">Filetype</register-use>
 <register-use number="2">Pointer to name used on registration</register-use>
 <register-use number="3">Magic value to match (must be the same as when registered</register-use>
</entry>
<exit>
 <register-use number="0-3" state="preserved" />
</exit>
<use>
<p>This SWI is used to deregister a renderer.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_Register" />
</related>

</swi-definition>


<swi-definition name="ImageFileRender_EnumerateRenderers"
                number="56268"
                description="Enumerate the active renderers"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">Flags (reserved, must be 0)</register-use>
 <register-use number="1">Last filetype, or -1 for first call</register-use>
 <register-use number="2">Magic value, or 0 for first call</register-use>
</entry>
<exit>
 <register-use number="0">Pointer to renderer definition block (read only)</register-use>
 <register-use number="1">Filetype of this renderer, or -1 if there are no more</register-use>
 <register-use number="2">Magic value of this renderer</register-use>
</exit>
<use>
<p>This SWI is used to enumerate the renderers which have been registered
with the ImageFileRender module.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_RendererInfo" />
</related>

</swi-definition>

</section>

<section title="Error Messages">
<error-definition name="IFR_BadTransformType"
                  number="81A800"
                  description="Bad transform type">
<use>
<p>This error is returned when the transformation type specified is invalid.</p>
</use>
</error-definition>


<error-definition name="IFR_Reserved"
                  number="81A801"
                  description="Reserved flags set for ImageFileRender SWI">
<use>
<p>This error is returned when a SWI has been called with flags set which have been
defined as reserved. Where possible, this will be returned to allow clients to use
new features when they are available, and to fall back to older methods where the
features requested are not avialable.</p>
</use>
</error-definition>


<error-definition name="IFR_ReservedRendererFlags"
                  number="81A802"
                  description="Reserved flags set for ImageFileRender renderer">
<use>
<p>This error is returned during renderer registration when the flags specified in
the renderer definition has flags set which have defined as reserved.</p>
</use>
</error-definition>


<error-definition name="IFR_Memory"
                  number="81A803"
                  description="Not enough memory for ImageFileRender">
<use>
<p>This error is returned when there is not enough memory for the rendering
(or other) operation.</p>
</use>
</error-definition>


<error-definition name="IFR_NoSuchRendererToRemove"
                  number="81A804"
                  description="Renderer not known">
<use>
<p>This error is returned when the renderer being deregistered is not known
to the ImageFileRender module.</p>
</use>
</error-definition>


<error-definition name="IFR_NoRenderr"
                  number="81A805"
                  description="No renderer registered for that filetype">
<use>
<p>This error is returned when an operation is attempted on a filetype for which no
renderer has been registered.</p>
</use>
</error-definition>


<error-definition name="IFR_BadAPI"
                  number="81A806"
                  description="Bad API version">
<use>
<p>This error is returned when an operation is attempted for which the renderer API
is not understood by the renderer. This will most likely not be seen by external
clients. Clients who proxy their rendering through another renderer may see this if
the APIs provided do not match between the proxy and the client.</p>
</use>
</error-definition>


<error-definition name="IFR_CantTransform"
                  number="81A807"
                  description="Transformation type not supported by filetype">
<use>
<p>This error is returned when the rendering operation cannot be performed because the
renderer does not support the transformation requested by the client. The most likely
cause for this error is attempted to skew or rotate a filetype which cannot be skewed
or rotated (for example JPEGs).</p>
</use>
</error-definition>


<error-definition name="IFR_NoColourMap"
                  number="81A808"
                  description="Colour mapping not supported by filetype">
<use>
<p>This error is returned when a rendering operation cannot be performed because the
renderer does not support colourmapping and colourmapping has been requested by
the client.</p>
</use>
</error-definition>


<error-definition name="IFR_BadInfoQuery"
                  number="81A809"
                  description="Query type not recognised">
<use>
<p>This error is returned when the ImageFileRender_Info query type has not
been recognised by the renderer.</p>
</use>
</error-definition>


<error-definition name="IFR_BadInfoLength"
                  number="81A80A"
                  description="Bad query length">
<use>
<p>This error is returned when the ImageFileRender_Info query type has been recognised
by the renderer, but the length supplied was not understood.</p>
</use>
</error-definition>


<error-definition name="IFR_BadSpriteMode"
                  number="81A810"
                  description="Bad sprite mode">
<use>
<p>This error is returned by the sprite renderer when the image being rendered uses
a mode which is not understood by the system.</p>
</use>
</error-definition>


<error-definition name="IFR_BadSpriteFile"
                  number="81A811"
                  description="Sprite file corrupt or contains unrecognised data">
<use>
<p>This error is returned by the sprite renderer when the image being rendered is
malformed or contains data which is not understood.</p>
</use>
</error-definition>


<error-definition name="IFR_NoSuchSprite"
                  number="81A812"
                  description="Sprite not found">
<use>
<p>This error is returned by the sprite renderer when it cannot locate the sprite
named in the extension data.</p>
</use>
</error-definition>

</section>

<section title="Entry Points">

<entry-definition name="IFR_Start"
                  number="0"
                  description="Initialisation routine for ImageFileRender"
                  irqs="disabled"
                  fiqs="enabled"
                  processor-mode="SVC"
                  re-entrant="yes">

<entry>
 <register-use number="0">API version * 100 (102 in this version)</register-use>
 <register-use number="1">Pointer to image descriptor:
   <offset-table>
     <offset number="0">Pointer to data to render</offset>
     <offset number="4">Length of data</offset>
     <offset number="8">Pointer to extension data, or 0 if no data</offset>
     <offset number="12">Image sequence number</offset>     
     <offset number="16">Private image data, 0 initially</offset>
   </offset-table>
 </register-use>
 <register-use number="2">0</register-use>
 <register-use number="12">Workspace value on entry to ImageFileRender_Register</register-use>
</entry>
<exit>
</exit>

<use>
<p>The 'start' routine is called before any operations are applied to an image. This
allows clients to cache information relevant to the image such that subsequent calls
do not have to re-read the data. If the image data is not recognised, it
should be faulted. Errors should be reported by setting V and returning an
error block in R0.</p>

<p>Clients may fill in the private word with cached data. Usually this is a pointer
to some workspace specific to this image.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_Register" />
  <reference type="swi" name="ImageFileRender_Deregister" />
  <reference type="entry" name="IFR_Stop" />
</related>

</entry-definition>

<entry-definition name="IFR_Stop"
                  number="1"
                  description="Finalisation routine for ImageFileRender"
                  irqs="disabled"
                  fiqs="enabled"
                  processor-mode="SVC"
                  re-entrant="yes">

<entry>
 <register-use number="0">API version * 100 (102 in this version)</register-use>
 <register-use number="1">Pointer to image descriptor:
   <offset-table>
     <offset number="0">Pointer to data to render</offset>
     <offset number="4">Length of data</offset>
     <offset number="8">Pointer to extension data, or 0 if no data</offset>
     <offset number="12">Image sequence number</offset>     
     <offset number="16">Private image data</offset>
   </offset-table>
 </register-use>
 <register-use number="2">0</register-use>
 <register-use number="12">Workspace value on entry to ImageFileRender_Register</register-use>
</entry>
<exit>
</exit>

<use>
<p>The 'stop' routine is called after all operations are applied to an image. This
allows clients to release space allocated for cache information relevant to the image.
If there is any internal error, the client should tidy up as best it can and
return an error. Errors should be reported by setting V and returning an
error block in R0.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_Register" />
  <reference type="swi" name="ImageFileRender_Deregister" />
  <reference type="entry" name="IFR_Start" />
</related>

</entry-definition>

<entry-definition name="IFR_Render"
                number="2"
                description="Rendering routine for ImageFileRender"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">API version * 100 (102 in this version)</register-use>
 <register-use number="1">Pointer to image descriptor:
   <offset-table>
     <offset number="0">Pointer to data to render</offset>
     <offset number="4">Length of data</offset>
     <offset number="8">Pointer to extension data, or 0 if no data</offset>
     <offset number="12">Image sequence number</offset>     
     <offset number="16">Private image data</offset>
   </offset-table>
 </register-use>
 <register-use number="2">Pointer to rendering descriptor:
   <offset-table>
     <offset number="0">Flags :
       <bitfield-table>
         <bit number="0-2" state="reserved" />
         <bit number="3">Colour mapping function supplied</bit>
         <bit number="4-5" state="reserved" />
         <bit number="6-8">Quality to render at:
           <value-table>
             <value number="0">Use default quality</value>
             <value number="1">Lowest quality</value>
             <value number="2-14">Renderer specific values</value>
             <value number="15">Highest quality</value>
           </value-table>
         </bit>
         <bit number="9-31" state="reserved" />
       </bitfield-table>
       </offset>
     <offset number="4-24">Transformation matrix to apply (standard format)</offset>
     <offset number="28">Minimum X clipping rectangle in external coordinates</offset>
     <offset number="32">Minimum Y clipping rectangle in external coordinates</offset>
     <offset number="36">Maximum X clipping rectangle in external coordinates</offset>
     <offset number="40">Maximum Y clipping rectangle in external coordinates</offset>
     <offset number="44">Pointer to colour mapping routine</offset>
     <offset number="48">Workspace for colour mapping routine</offset>
   </offset-table>
 </register-use>
 <register-use number="12">Workspace value on entry to
ImageFileRender_Register</register-use>
</entry>
<exit>
</exit>

<use>
<p>The rendering routine is called to render an image using a given
transformation. If the image data is not recognised, it should be faulted.
Errors should be reported by setting V and returning an error block in R0.
</p>

<p>The clipping rectangle passed represents the graphics rectangle as
external coorinates (OS units) which is currently in use. It is provided
for information such that rendering can take advantage of fast rejection
of regions which do not need to be redrawn.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_Register" />
  <reference type="swi" name="ImageFileRender_Deregister" />
  <reference type="swi" name="ImageFileRender_Render" />
</related>

</entry-definition>


<entry-definition name="IFR_BBox"
                number="3"
                description="Bounding box function for ImageFileRenderer"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">API version * 100 (102 in this version)</register-use>
 <register-use number="1">Pointer to image descriptor:
   <offset-table>
     <offset number="0">Pointer to data to render</offset>
     <offset number="4">Length of data</offset>
     <offset number="8">Pointer to extension data, or 0 if no data</offset>
     <offset number="12">Image sequence number</offset>
     <offset number="16">Private image data</offset>
   </offset-table>
 </register-use>
 <register-use number="2">Pointer to bounding box descriptor:
   <offset-table>
     <offset number="0">Flags (0)</offset>
     <offset number="4-24">Transformation matrix to apply (standard format)</offset>
     <offset number="28">Minimum X position in Draw coordinates</offset>
     <offset number="32">Minimum Y position in Draw coordinates</offset>
     <offset number="36">Maximum X position in Draw coordinates</offset>
     <offset number="40">Maximum Y position in Draw coordinates</offset>
   </offset-table>
 </register-use>
</entry>

<exit>
</exit>

<use>
<p>The bounding box routine is called to calculate the bounding box for a
given transformation. If the image data is not recognised, it should be
faulted. Errors should be reported by setting V and returning an error
block in R0. The bounding box should be returned in draw coordinates for
the images extent. That is, OS units * 256. Resolution values should be
provided for information. If no DPI information is available, 180 (the
screen resolution) should be returned.</p>

<p>If bit 3 of the renderer flags was clear on registration, the
transformation matrix will be an identity matrix and can effectively be
ignored. The scaling to the clients required size will be performed by
ImageFileRender module based on the bounding box returned.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_Register" />
  <reference type="swi" name="ImageFileRender_Deregister" />
  <reference type="swi" name="ImageFileRender_BBox" />
</related>

</entry-definition>


<entry-definition name="IFR_DeclareFonts"
                number="4"
                description="Declare fonts function for ImageFileRenderer"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">API version * 100 (102 in this version)</register-use>
 <register-use number="1">Pointer to image descriptor:
   <offset-table>
     <offset number="0">Pointer to data to render</offset>
     <offset number="4">Length of data</offset>
     <offset number="8">Pointer to extension data, or 0 if no data</offset>
     <offset number="12">Image sequence number</offset>
     <offset number="16">Private image data</offset>
   </offset-table>
 </register-use>
 <register-use number="2">Pointer to declare fonts descriptor:
   <offset-table>
     <offset number="0">Flags (0)</offset>
     <offset number="4">Flags to pass to PDriver_DeclareFont</offset>
   </offset-table>
 </register-use>
</entry>
<exit>
</exit>
<use>
<p>The font declaration routine need only be provided by renderers which
use fonts. The renderer should call <reference type="swi"
name="PDriver_DeclareFont" href="?" /> with the names
of all fonts and the flags passed in R4. If the image data is not
recognised, it should be faulted. Errors should be reported by setting V and
returning an error block in R0.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_Register" />
  <reference type="swi" name="ImageFileRender_Deregister" />
  <reference type="swi" name="ImageFileRender_DeclareFonts" />
</related>

</entry-definition>


<entry-definition name="IFR_Info"
                number="5"
                description="Information function for ImageFileRenderer"
                irqs="disabled"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="yes">

<entry>
 <register-use number="0">API version * 100 (102 in this version)</register-use>
 <register-use number="1">Pointer to image descriptor:
   <offset-table>
     <offset number="0">Pointer to data to render</offset>
     <offset number="4">Length of data</offset>
     <offset number="8">Pointer to extension data, or 0 if no data</offset>
     <offset number="12">Image sequence number</offset>
     <offset number="16">Private image data</offset>
   </offset-table>
 </register-use>
 <register-use number="2">Pointer to information descriptor:
   <offset-table>
     <offset number="0">Query type</offset>
     <offset number="4">Query data length</offset>
     <offset number="8">Pointer to data block to take details from / fill in</offset>
   </offset-table>
 </register-use>
</entry>
<exit>
 <register-use number="0">If V flag set, a pointer to an error block, or a special error code :
   <value-table>
    <value number="1">Invalid query type - the query was not understood.</value>
    <value number="2">Invalid query length - the query was understood but its length was invalid.</value>
   </value-table>
 </register-use>
</exit>
<use>
<p>The information routine should be provided by renderers to query information
about the images. The routine should fault invalid queries and invalid query
lengths.</p>

</use>

<related>
  <reference type="swi" name="ImageFileRender_Register" />
  <reference type="swi" name="ImageFileRender_Deregister" />
  <reference type="swi" name="ImageFileRender_Info" />
</related>

</entry-definition>

</section>

<section title="*Commands">
<command-definition name="ImageFileRenderers"
                    description="List renderers registered with ImageFileRender">
<syntax>
</syntax>

<use>
<p><command>*ImageFileRenderers</command> is used to list the renderers
known to the ImageFileRender module. This can be used to check which file
formats are available for use with ImageFileRender from the command
line.</p>
</use>

<example>
<command>*ImageFileRenderers</command>
<systemoutput>
&amp;695 00000000 ConvertGIF        0.08  RISCOS Ltd (via IFC)<br />
&amp;69c 00000000 ConvertBMP        0.05  RISCOS Ltd (via IFC)<br />
&amp;69e 00000000 ConvertPNM        0.02  RISCOS Ltd (via IFC)<br />
&amp;aff 00000000 ImageFileRender   0.25  RISCOS Ltd<br />
&amp;b60 00000000 ConvertPNG        0.09  RISCOS Ltd (via IFC)<br />
&amp;b61 00000000 ConvertXBM        0.06  RISCOS Ltd (via IFC)<br />
&amp;c85 00000000 ImageFileRender   0.25  RISCOS Ltd<br />
&amp;d94 00000000 IFR Artworks      0.08  RISCOS Ltd<br />
&amp;fc9 00000000 ConvertSun        0.05  RISCOS Ltd (via IFC)<br />
&amp;ff9 66990101 ImageFileRender   0.25  RISCOS Ltd
</systemoutput>
</example>

<related>
<reference type="swi" name="ImageFileRender_EnumerateRenderers" />
<reference type="swi" name="ImageFileRender_Register" />
</related>

</command-definition>


<command-definition name="ImageFileViewer"
                    description="Sets the default viewer to use for files known to ImageFileRender">
<syntax>
 <optional>
  <userreplace>command</userreplace>
 </optional>
</syntax>

<use>
<p><command>*ImageFileViewer</command> is used to register a command which
can be used to view files known to ImageFileRender. The
<sysvar>Alias$@RunType_XXX</sysvar> variables will be set for filetypes 
known to ImageFileRender which have not already been set. If no parameter is
passed to the command, the default viewer wil be cleared and all the
variables will be unset.</p>

<p>The effect of issuing this command is that any files know to
ImageFileRender which are not recognised by running applications when
double-clicked in Filer (or run explicitly) will cause the command specified
to be run, passing the filename of the file run as the first parameter.</p>

</use>

<example>
<command>*ImageFileViewer /&lt;ImgViewer$Dir&gt;.!Run -file %*0</command>
</example>

<related>
</related>

</command-definition>
</section>

</chapter>

<!-- MetaData -->
<meta>
 <maintainer>
  <email name="Andrew Hill" address="drew.hill@tesco.net" />
  <email address="developer@riscos.com" />
 </maintainer>
 <disclaimer>
  <import document="http://www.riscos.com/prm/prm-disclaimer.xml" path="root/*" />
  <import document="http://www.riscos.com/prm/amh-disclaimer.xml" path="root/*" />
 </disclaimer>

 <history>
  <revision number="pre-1" author="AMH" title="Pre-release">
   <change>Converted from original text to XML</change>
  </revision>         
  <revision number="pre-2" author="AMH" title="Pre-release">
   <change>Modified ImageFileRender_BBox to add sequence number.</change>
   <change>Modified service call names to Render rather than Renderer.</change>
   <change>Updated the base details query.</change>
  </revision>         
  <revision number="pre-3" date="20 Nov 2002" author="ROL" title="Validated">
   <change>XML validated.</change>
   <change>Corrected sections which were undefined (IRQ, FIQ, Reentrancy).</change>
  </revision>
  <revision number="pre-4" date="21 Jan 2003" author="ROL" title="Misc corrections">
   <change>Corrected the DPI size given for drawfiles.</change>
   <change>Added details of start and stop operations.</change>
   <change>Finished off remaining undefined sections.</change>
   <change>Added error message definitions.</change>
  </revision>
  <revision number="pre-5" date="31 Jan 2003" author="ROL" title="Added Enumerate SWI">
   <change>Added documentation about EnumerateRenderers SWI.</change>
  </revision>
  <revision number="pre-6" date="21 Jan 2003" author="ROL" title="Misc corrections">
   <change>Correction for ImageFileRender_Transform description.</change>
  </revision>
  <revision number="pre-7" date="15 Feb 2003" author="ROL" title="New commands">
   <change>Added documentation of ImageFileRenderers and ImageFileViewer
           commands.</change>
  </revision>
  <revision number="pre-8" date="06 Apr 2003" author="ROL" title="Misc corrections">
   <change>Added magic error values for IFR_Info.</change>
   <change>Corrected documentation of IFR_BBox parameter block.</change>
   <change>Added hyperlinks to ImageFileRender_Register and a few related references.</change>
  </revision>
  <revision number="pre-8" date="01 May 2004" author="ROL" title="Table correction">
   <change>ImageFileRender_Render's R8 table has been clarified.</change>
  </revision>
 </history>
</meta>
</riscos-prm>
